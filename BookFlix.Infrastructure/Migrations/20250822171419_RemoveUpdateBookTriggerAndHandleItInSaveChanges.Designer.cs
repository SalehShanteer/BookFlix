// <auto-generated />
using System;
using BookFlix.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookFlix.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250822171419_RemoveUpdateBookTriggerAndHandleItInSaveChanges")]
    partial class RemoveUpdateBookTriggerAndHandleItInSaveChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookFlix.Core.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "F. Scott Fitzgerald"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 3,
                            Name = "George Orwell"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Frank Herbert"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Yuval Noah Harari"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dan Brown"
                        });
                });

            modelBuilder.Entity("BookFlix.Core.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FileLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 4.20m,
                            CoverImageUrl = "https://example.com/great-gatsby.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A novel set in the Roaring Twenties.",
                            ISBN = "9780743273565",
                            IsAvailable = true,
                            PageCount = 180,
                            PublicationDate = new DateTime(1925, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Scribner",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 4.30m,
                            CoverImageUrl = "https://example.com/to-kill-a-mockingbird.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A novel about racial injustice in the Deep South.",
                            ISBN = "9780061120084",
                            IsAvailable = true,
                            PageCount = 281,
                            PublicationDate = new DateTime(1960, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "J.B. Lippincott & Co.",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 4.40m,
                            CoverImageUrl = "https://example.com/1984.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A dystopian novel about totalitarianism.",
                            ISBN = "9780451524935",
                            IsAvailable = true,
                            PageCount = 328,
                            PublicationDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Secker & Warburg",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 4.25m,
                            CoverImageUrl = "https://example.com/pride-and-prejudice.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A romantic novel about love and social class.",
                            ISBN = "9780141439518",
                            IsAvailable = true,
                            PageCount = 432,
                            PublicationDate = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Penguin Classics",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 4.27m,
                            CoverImageUrl = "https://example.com/the-hobbit.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A fantasy adventure about Bilbo Baggins.",
                            ISBN = "9780547928227",
                            IsAvailable = true,
                            PageCount = 310,
                            PublicationDate = new DateTime(1937, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Houghton Mifflin",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 4.21m,
                            CoverImageUrl = "https://example.com/dune.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A science fiction epic about a desert planet.",
                            ISBN = "9780441172719",
                            IsAvailable = true,
                            PageCount = 412,
                            PublicationDate = new DateTime(1965, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Ace Books",
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 7,
                            AverageRating = 4.38m,
                            CoverImageUrl = "https://example.com/sapiens.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A nonfiction exploration of human history.",
                            ISBN = "9780062316097",
                            IsAvailable = true,
                            PageCount = 443,
                            PublicationDate = new DateTime(2014, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Harper",
                            Title = "Sapiens: A Brief History of Humankind"
                        },
                        new
                        {
                            Id = 8,
                            AverageRating = 3.85m,
                            CoverImageUrl = "https://example.com/da-vinci-code.jpg",
                            CreatedAt = new DateTime(2025, 8, 5, 10, 0, 0, 0, DateTimeKind.Local),
                            Description = "A thriller involving a religious conspiracy.",
                            ISBN = "9780307277671",
                            IsAvailable = true,
                            PageCount = 454,
                            PublicationDate = new DateTime(2003, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Doubleday",
                            Title = "The Da Vinci Code"
                        });
                });

            modelBuilder.Entity("BookFlix.Core.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8
                        });
                });

            modelBuilder.Entity("BookFlix.Core.Models.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 7
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 8
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 4
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 19
                        },
                        new
                        {
                            BookId = 6,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 14
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 6
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 5
                        });
                });

            modelBuilder.Entity("BookFlix.Core.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nonfiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Autobiography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 14,
                            Name = "History"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Literary Criticism"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Philosophy"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Religion"
                        });
                });

            modelBuilder.Entity("BookFlix.Core.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("BookFlix.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("User");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BookFlix.Core.Models.BookAuthor", b =>
                {
                    b.HasOne("BookFlix.Core.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookFlix.Core.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookFlix.Core.Models.BookGenre", b =>
                {
                    b.HasOne("BookFlix.Core.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookFlix.Core.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookFlix.Core.Models.Review", b =>
                {
                    b.HasOne("BookFlix.Core.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookFlix.Core.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookFlix.Core.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookFlix.Core.Models.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
