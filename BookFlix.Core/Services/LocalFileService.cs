using BookFlix.Core.Repositories;
using BookFlix.Core.Service_Interfaces;
using BookFlix.Core.Services.Validation;
using BookFlix.Core.Services.Validation.Book;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace BookFlix.Core.Services
{
    public class LocalFileService : IFileService
    {
        private readonly IBookRepository _bookRepository;
        private readonly string _bookDirectory;
        private readonly ILogger<LocalFileService> _logger;

        public LocalFileService(IBookRepository bookRepository, IConfiguration configuration, ILogger<LocalFileService> logger)
        {
            _bookRepository = bookRepository;
            _bookDirectory = configuration.GetSection("BookDirectory").Value
                ?? throw new InvalidOperationException("BookDirectory not configured in appsettings.json");
            _logger = logger;
        }

        public async Task<UpdateBookValidationResult> UploadFileAsync(int bookId, IFormFile? file)
        {
            var result = new UpdateBookValidationResult();

            ValidateFile(file, result);
            if (!result.IsValid) return result;

            var book = await _bookRepository.GetByIdForUpdateFileLocationAsync(bookId);
            if (book == null)
            {
                result.Errors.Add($"Book with ID {bookId} not found.");
                result.StatusCode = enStatusCode.NotFound;
                return result;
            }

            using var transaction = await _bookRepository.BeginTransactionAsync();
            try
            {
                DeleteBookOldFile(book.FileLocation, result);
                if (!result.IsValid)
                {
                    result.StatusCode = enStatusCode.InternalServerError;
                    return result;
                }

                book.FileLocation = SetAutoGeneratedFileName();
                await SaveFileToDirectory(file!, book.FileLocation);
                await _bookRepository.UpdateFileLocationAsync(bookId, book.FileLocation);
                await transaction.CommitAsync();

                result.FileLocation = book.FileLocation;
                return result;
            }
            catch (IOException ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "IO error uploading file for book ID {BookId}", bookId);
                result.Errors.Add("Failed to save file due to a storage error.");
                result.StatusCode = enStatusCode.InternalServerError;
                return result;
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Unexpected error uploading file for book ID {BookId}", bookId);
                result.Errors.Add("An unexpected error occurred while uploading the file.");
                result.StatusCode = enStatusCode.InternalServerError;
                return result;
            }
        }

        private void DeleteBookOldFile(string? oldFileLocation, UpdateBookValidationResult result)
        {
            if (!string.IsNullOrEmpty(oldFileLocation) && File.Exists(oldFileLocation))
            {
                try
                {
                    File.Delete(oldFileLocation);
                }
                catch (IOException ex)
                {
                    _logger.LogWarning(ex, "Failed to delete old file: {FilePath}", oldFileLocation);
                    result.Errors.Add("Failed to delete the previous file; proceeding with upload.");
                }
            }
        }

        private void ValidateFile(IFormFile? file, UpdateBookValidationResult result)
        {
            if (file == null || file.Length == 0)
            {
                result.Errors.Add("File is null or empty.");
                result.StatusCode = enStatusCode.BadRequest;
                return;
            }

            if (file.ContentType != "application/pdf")
            {
                result.Errors.Add("Only PDF files are allowed.");
                result.StatusCode = enStatusCode.BadRequest;
                return;
            }

            if (file.Length > 100 * 1024 * 1024)
            {
                result.Errors.Add("File size exceeds 100MB limit.");
                result.StatusCode = enStatusCode.BadRequest;
                return;
            }
        }

        private async Task SaveFileToDirectory(IFormFile file, string filePath)
        {
            var directory = Path.GetDirectoryName(filePath) ?? throw new InvalidOperationException("Invalid file path.");
            if (!Directory.Exists(directory))
                Directory.CreateDirectory(directory);

            using var stream = new FileStream(filePath, FileMode.Create);
            await file.CopyToAsync(stream);
        }

        private string SetAutoGeneratedFileName()
        {
            string fileName = $"{Guid.NewGuid()}.pdf";
            return Path.Combine(_bookDirectory, fileName);
        }
    }
}