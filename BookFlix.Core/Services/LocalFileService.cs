using BookFlix.Core.Repositories;
using BookFlix.Core.Service_Interfaces;
using BookFlix.Core.Services.Validation;
using BookFlix.Core.Services.Validation.Book;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;


namespace BookFlix.Core.Services
{
    public class LocalFileService : IFileService
    {
        private readonly IBookRepository _bookRepository;
        private readonly string _bookDirectory;

        public LocalFileService(IBookRepository bookRepository, IConfiguration configuration)
        {
            _bookRepository = bookRepository;
            _bookDirectory = configuration.GetSection("BookDirectory").Value
                ?? throw new InvalidOperationException("BookDirectory not configured in appsettings.json");
        }

        // only support pdf format for now
        public async Task<UpdateBookValidationResult> UploadFileAsync(int bookId, IFormFile? file)
        {
            var result = new UpdateBookValidationResult();

            _ValidateFile(file, result);

            if (!result.IsValid) return result;

            // Retrieve book
            var book = await _bookRepository.GetByIdForUpdateFileLocationAsync(bookId);

            if (book == null)
            {
                result.Errors.Add($"Book with ID {bookId} not found.");
                result.StatusCode = enStatusCode.NotFound;
                return result;
            }

            try
            {
                book.FileLocation = _SetAutoGeneratedFileName();

                await _SaveFileToDirectory(file!, book.FileLocation);

                // Update book in database    
                await _bookRepository.UpdateAsync(book);
            }

            catch (IOException ex)
            {
                result.Errors.Add($"Failed to save file: {ex.Message}");
                result.StatusCode = enStatusCode.InternalServerError;
                return result;
            }
            catch (Exception ex)
            {
                result.Errors.Add($"An error occurred: {ex.Message}");
                result.StatusCode = enStatusCode.InternalServerError;
                return result;
            }
            result.FileLocation = book.FileLocation;
            return result;
        }

        private void _ValidateFile(IFormFile? file, ValidationResult result)
        {
            // Validate input
            if (file == null || file.Length == 0)
            {
                result.Errors.Add("File is null or empty.");
                return;
            }

            if (file.ContentType != "application/pdf")
            {
                result.Errors.Add("Only PDF files are allowed.");
                return;
            }

            if (file.Length > 100 * 1024 * 1024) // 100MB limit
            {
                result.Errors.Add("File size exceeds 100MB limit.");
                return;
            }
        }

        private async Task _SaveFileToDirectory(IFormFile file, string filePath)
        {
            var directory = Path.GetDirectoryName(filePath);
            if (directory is not null && !Directory.Exists(directory))
                Directory.CreateDirectory(directory);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }
        }

        private string _SetAutoGeneratedFileName()
        {
            string directory = _bookDirectory;

            string fileName = $"{Guid.NewGuid()}.pdf";

            return Path.Combine(directory, fileName);
        }
    }
}
